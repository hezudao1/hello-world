/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdditioinService_H
#define AdditioinService_H

#include <thrift/TDispatchProcessor.h>
#include "add_types.h"



class AdditioinServiceIf {
 public:
  virtual ~AdditioinServiceIf() {}
  virtual int add(const int n1, const int n2) = 0;
};

class AdditioinServiceIfFactory {
 public:
  typedef AdditioinServiceIf Handler;

  virtual ~AdditioinServiceIfFactory() {}

  virtual AdditioinServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdditioinServiceIf* /* handler */) = 0;
};

class AdditioinServiceIfSingletonFactory : virtual public AdditioinServiceIfFactory {
 public:
  AdditioinServiceIfSingletonFactory(const boost::shared_ptr<AdditioinServiceIf>& iface) : iface_(iface) {}
  virtual ~AdditioinServiceIfSingletonFactory() {}

  virtual AdditioinServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdditioinServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdditioinServiceIf> iface_;
};

class AdditioinServiceNull : virtual public AdditioinServiceIf {
 public:
  virtual ~AdditioinServiceNull() {}
  int add(const int /* n1 */, const int /* n2 */) {
    int _return = 0;
    return _return;
  }
};

typedef struct _AdditioinService_add_args__isset {
  _AdditioinService_add_args__isset() : n1(false), n2(false) {}
  bool n1 :1;
  bool n2 :1;
} _AdditioinService_add_args__isset;

class AdditioinService_add_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  AdditioinService_add_args(const AdditioinService_add_args&);
  AdditioinService_add_args& operator=(const AdditioinService_add_args&);
  AdditioinService_add_args() : n1(0), n2(0) {
  }

  virtual ~AdditioinService_add_args() throw();
  int n1;
  int n2;

  _AdditioinService_add_args__isset __isset;

  void __set_n1(const int val);

  void __set_n2(const int val);

  bool operator == (const AdditioinService_add_args & rhs) const
  {
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const AdditioinService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdditioinService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AdditioinService_add_args& obj);
};


class AdditioinService_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~AdditioinService_add_pargs() throw();
  const int* n1;
  const int* n2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AdditioinService_add_pargs& obj);
};

typedef struct _AdditioinService_add_result__isset {
  _AdditioinService_add_result__isset() : success(false) {}
  bool success :1;
} _AdditioinService_add_result__isset;

class AdditioinService_add_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  AdditioinService_add_result(const AdditioinService_add_result&);
  AdditioinService_add_result& operator=(const AdditioinService_add_result&);
  AdditioinService_add_result() : success(0) {
  }

  virtual ~AdditioinService_add_result() throw();
  int success;

  _AdditioinService_add_result__isset __isset;

  void __set_success(const int val);

  bool operator == (const AdditioinService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdditioinService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdditioinService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AdditioinService_add_result& obj);
};

typedef struct _AdditioinService_add_presult__isset {
  _AdditioinService_add_presult__isset() : success(false) {}
  bool success :1;
} _AdditioinService_add_presult__isset;

class AdditioinService_add_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~AdditioinService_add_presult() throw();
  int* success;

  _AdditioinService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const AdditioinService_add_presult& obj);
};

class AdditioinServiceClient : virtual public AdditioinServiceIf {
 public:
  AdditioinServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdditioinServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int add(const int n1, const int n2);
  void send_add(const int n1, const int n2);
  int recv_add();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdditioinServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AdditioinServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdditioinServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdditioinServiceProcessor(boost::shared_ptr<AdditioinServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &AdditioinServiceProcessor::process_add;
  }

  virtual ~AdditioinServiceProcessor() {}
};

class AdditioinServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdditioinServiceProcessorFactory(const ::boost::shared_ptr< AdditioinServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdditioinServiceIfFactory > handlerFactory_;
};

class AdditioinServiceMultiface : virtual public AdditioinServiceIf {
 public:
  AdditioinServiceMultiface(std::vector<boost::shared_ptr<AdditioinServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdditioinServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdditioinServiceIf> > ifaces_;
  AdditioinServiceMultiface() {}
  void add(boost::shared_ptr<AdditioinServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int add(const int n1, const int n2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(n1, n2);
    }
    return ifaces_[i]->add(n1, n2);
  }

};



#endif
